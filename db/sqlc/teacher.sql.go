// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: teacher.sql

package db

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :exec
INSERT INTO teacher (
  full_name,
  email
) VALUES (
  ?, ?
)
`

type CreateTeacherParams struct {
	FullName string `json:"full_name"`
	Email    string `json:"email"`
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) error {
	_, err := q.db.ExecContext(ctx, createTeacher, arg.FullName, arg.Email)
	return err
}

const getTeacherByEmail = `-- name: GetTeacherByEmail :one
SELECT id, full_name, email, is_active, created_at, updated_at, deleted_at FROM teacher
WHERE email = ? AND is_active = 1 LIMIT 1
`

func (q *Queries) GetTeacherByEmail(ctx context.Context, email string) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacherByEmail, email)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTeacherById = `-- name: GetTeacherById :one
SELECT id, full_name, email, is_active, created_at, updated_at, deleted_at FROM teacher
WHERE id = ? AND is_active = 1 LIMIT 1
`

func (q *Queries) GetTeacherById(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacherById, id)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
