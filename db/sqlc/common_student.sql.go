// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: common_student.sql

package db

import (
    "context"
    "fmt"
    qc "github.com/khorsl/teacherportal/db/querycustom"
)

type GetCommonStudentsEmailParams struct {
    Email string `json:"email"`
    Count int64 `json:"count"`
}

func (q *Queries) GetCommonStudentsEmail(ctx context.Context, arg GetCommonStudentsEmailParams) ([]string, error) {
    // getCommonStudentsEmail := fmt.Sprintf(`
    //     -- name: GetCommonStudentsEmail :many
    //     SELECT s.email FROM student s WHERE s.id IN (
    //     SELECT r.student_id FROM register r WHERE r.teacher_id
    //     IN (SELECT t.id FROM teacher t WHERE t.email IN (%s))
    //     GROUP BY r.student_id
    //     HAVING COUNT(r.student_id) = %d)`, arg.Email, arg.Count)
    getCommonStudentsEmail := fmt.Sprintf(qc.GetCommonStudentsEmailSQL, arg.Email, arg.Count)
    rows, err := q.db.QueryContext(ctx, getCommonStudentsEmail)
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    items := []string{}
    for rows.Next() {
        var email string
        if err := rows.Scan(&email); err != nil {
            return nil, err
        }
        items = append(items, email)
    }
    if err := rows.Close(); err != nil {
        return nil, err
    }
    if err := rows.Err(); err != nil {
        return nil, err
    }
    return items, nil
}
