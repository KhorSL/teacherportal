// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: student.sql

package db

import (
	"context"
)

const createStudent = `-- name: CreateStudent :exec
INSERT INTO student (
  full_name,
  email
) VALUES (
  ?, ?
)
`

type CreateStudentParams struct {
	FullName string `json:"full_name"`
	Email    string `json:"email"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) error {
	_, err := q.db.ExecContext(ctx, createStudent, arg.FullName, arg.Email)
	return err
}

const getNotSuspendedStudentByEmail = `-- name: GetNotSuspendedStudentByEmail :one
SELECT id, full_name, email, is_suspended, is_active, suspended_at, created_at, updated_at, deleted_at FROM student
WHERE email = ? AND is_suspended = 0 AND is_active = 1 LIMIT 1
`

func (q *Queries) GetNotSuspendedStudentByEmail(ctx context.Context, email string) (Student, error) {
	row := q.db.QueryRowContext(ctx, getNotSuspendedStudentByEmail, email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.IsSuspended,
		&i.IsActive,
		&i.SuspendedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getStudentByEmail = `-- name: GetStudentByEmail :one
SELECT id, full_name, email, is_suspended, is_active, suspended_at, created_at, updated_at, deleted_at FROM student
WHERE email = ? AND is_active = 1 LIMIT 1
`

func (q *Queries) GetStudentByEmail(ctx context.Context, email string) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByEmail, email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.IsSuspended,
		&i.IsActive,
		&i.SuspendedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getStudentById = `-- name: GetStudentById :one
SELECT id, full_name, email, is_suspended, is_active, suspended_at, created_at, updated_at, deleted_at FROM student
WHERE id = ? AND is_active = 1 LIMIT 1
`

func (q *Queries) GetStudentById(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.IsSuspended,
		&i.IsActive,
		&i.SuspendedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const suspendStudentByEmail = `-- name: SuspendStudentByEmail :exec
UPDATE student
SET is_suspended = 1, suspended_at = CURRENT_TIMESTAMP(), updated_at = CURRENT_TIMESTAMP()
WHERE email = ?
`

func (q *Queries) SuspendStudentByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, suspendStudentByEmail, email)
	return err
}
