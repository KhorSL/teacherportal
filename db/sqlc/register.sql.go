// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: register.sql

package db

import (
	"context"
)

const createRegister = `-- name: CreateRegister :exec
INSERT INTO register (
  teacher_id,
  student_id
) VALUES (
  ?, ?
)
`

type CreateRegisterParams struct {
	TeacherID int64 `json:"teacher_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) CreateRegister(ctx context.Context, arg CreateRegisterParams) error {
	_, err := q.db.ExecContext(ctx, createRegister, arg.TeacherID, arg.StudentID)
	return err
}

const getRegisterByStudentId = `-- name: GetRegisterByStudentId :many
SELECT id, teacher_id, student_id, created_at FROM register
WHERE student_id = ?
`

func (q *Queries) GetRegisterByStudentId(ctx context.Context, studentID int64) ([]Register, error) {
	rows, err := q.db.QueryContext(ctx, getRegisterByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Register{}
	for rows.Next() {
		var i Register
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.StudentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegisterByStudentIdAndTeacherId = `-- name: GetRegisterByStudentIdAndTeacherId :one
SELECT id, teacher_id, student_id, created_at FROM register
WHERE student_id = ? AND teacher_id = ?
`

type GetRegisterByStudentIdAndTeacherIdParams struct {
	StudentID int64 `json:"student_id"`
	TeacherID int64 `json:"teacher_id"`
}

func (q *Queries) GetRegisterByStudentIdAndTeacherId(ctx context.Context, arg GetRegisterByStudentIdAndTeacherIdParams) (Register, error) {
	row := q.db.QueryRowContext(ctx, getRegisterByStudentIdAndTeacherId, arg.StudentID, arg.TeacherID)
	var i Register
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.StudentID,
		&i.CreatedAt,
	)
	return i, err
}

const getRegisterByTeacherId = `-- name: GetRegisterByTeacherId :many
SELECT id, teacher_id, student_id, created_at FROM register
WHERE teacher_id = ?
`

func (q *Queries) GetRegisterByTeacherId(ctx context.Context, teacherID int64) ([]Register, error) {
	rows, err := q.db.QueryContext(ctx, getRegisterByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Register{}
	for rows.Next() {
		var i Register
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.StudentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
