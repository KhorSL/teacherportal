// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/khorsl/teacherportal/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/khorsl/teacherportal/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateRegister mocks base method.
func (m *MockStore) CreateRegister(arg0 context.Context, arg1 db.CreateRegisterParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegister", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRegister indicates an expected call of CreateRegister.
func (mr *MockStoreMockRecorder) CreateRegister(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegister", reflect.TypeOf((*MockStore)(nil).CreateRegister), arg0, arg1)
}

// CreateStudent mocks base method.
func (m *MockStore) CreateStudent(arg0 context.Context, arg1 db.CreateStudentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockStoreMockRecorder) CreateStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockStore)(nil).CreateStudent), arg0, arg1)
}

// CreateTeacher mocks base method.
func (m *MockStore) CreateTeacher(arg0 context.Context, arg1 db.CreateTeacherParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeacher indicates an expected call of CreateTeacher.
func (mr *MockStoreMockRecorder) CreateTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeacher", reflect.TypeOf((*MockStore)(nil).CreateTeacher), arg0, arg1)
}

// GetCommonStudentsEmail mocks base method.
func (m *MockStore) GetCommonStudentsEmail(arg0 context.Context, arg1 db.GetCommonStudentsEmailParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonStudentsEmail", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommonStudentsEmail indicates an expected call of GetCommonStudentsEmail.
func (mr *MockStoreMockRecorder) GetCommonStudentsEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonStudentsEmail", reflect.TypeOf((*MockStore)(nil).GetCommonStudentsEmail), arg0, arg1)
}

// GetNotSuspendedStudentByEmail mocks base method.
func (m *MockStore) GetNotSuspendedStudentByEmail(arg0 context.Context, arg1 string) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotSuspendedStudentByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotSuspendedStudentByEmail indicates an expected call of GetNotSuspendedStudentByEmail.
func (mr *MockStoreMockRecorder) GetNotSuspendedStudentByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotSuspendedStudentByEmail", reflect.TypeOf((*MockStore)(nil).GetNotSuspendedStudentByEmail), arg0, arg1)
}

// GetRegisterByStudentId mocks base method.
func (m *MockStore) GetRegisterByStudentId(arg0 context.Context, arg1 int64) ([]db.Register, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterByStudentId", arg0, arg1)
	ret0, _ := ret[0].([]db.Register)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterByStudentId indicates an expected call of GetRegisterByStudentId.
func (mr *MockStoreMockRecorder) GetRegisterByStudentId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterByStudentId", reflect.TypeOf((*MockStore)(nil).GetRegisterByStudentId), arg0, arg1)
}

// GetRegisterByStudentIdAndTeacherId mocks base method.
func (m *MockStore) GetRegisterByStudentIdAndTeacherId(arg0 context.Context, arg1 db.GetRegisterByStudentIdAndTeacherIdParams) (db.Register, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterByStudentIdAndTeacherId", arg0, arg1)
	ret0, _ := ret[0].(db.Register)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterByStudentIdAndTeacherId indicates an expected call of GetRegisterByStudentIdAndTeacherId.
func (mr *MockStoreMockRecorder) GetRegisterByStudentIdAndTeacherId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterByStudentIdAndTeacherId", reflect.TypeOf((*MockStore)(nil).GetRegisterByStudentIdAndTeacherId), arg0, arg1)
}

// GetRegisterByTeacherId mocks base method.
func (m *MockStore) GetRegisterByTeacherId(arg0 context.Context, arg1 int64) ([]db.Register, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterByTeacherId", arg0, arg1)
	ret0, _ := ret[0].([]db.Register)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterByTeacherId indicates an expected call of GetRegisterByTeacherId.
func (mr *MockStoreMockRecorder) GetRegisterByTeacherId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterByTeacherId", reflect.TypeOf((*MockStore)(nil).GetRegisterByTeacherId), arg0, arg1)
}

// GetStudentByEmail mocks base method.
func (m *MockStore) GetStudentByEmail(arg0 context.Context, arg1 string) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByEmail indicates an expected call of GetStudentByEmail.
func (mr *MockStoreMockRecorder) GetStudentByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByEmail", reflect.TypeOf((*MockStore)(nil).GetStudentByEmail), arg0, arg1)
}

// GetStudentById mocks base method.
func (m *MockStore) GetStudentById(arg0 context.Context, arg1 int64) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentById", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentById indicates an expected call of GetStudentById.
func (mr *MockStoreMockRecorder) GetStudentById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentById", reflect.TypeOf((*MockStore)(nil).GetStudentById), arg0, arg1)
}

// GetStudentsEmailForNotification mocks base method.
func (m *MockStore) GetStudentsEmailForNotification(arg0 context.Context, arg1 db.GetStudentsEmailForNotificationParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentsEmailForNotification", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentsEmailForNotification indicates an expected call of GetStudentsEmailForNotification.
func (mr *MockStoreMockRecorder) GetStudentsEmailForNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentsEmailForNotification", reflect.TypeOf((*MockStore)(nil).GetStudentsEmailForNotification), arg0, arg1)
}

// GetTeacherByEmail mocks base method.
func (m *MockStore) GetTeacherByEmail(arg0 context.Context, arg1 string) (db.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherByEmail indicates an expected call of GetTeacherByEmail.
func (mr *MockStoreMockRecorder) GetTeacherByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherByEmail", reflect.TypeOf((*MockStore)(nil).GetTeacherByEmail), arg0, arg1)
}

// GetTeacherById mocks base method.
func (m *MockStore) GetTeacherById(arg0 context.Context, arg1 int64) (db.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherById", arg0, arg1)
	ret0, _ := ret[0].(db.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherById indicates an expected call of GetTeacherById.
func (mr *MockStoreMockRecorder) GetTeacherById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherById", reflect.TypeOf((*MockStore)(nil).GetTeacherById), arg0, arg1)
}

// RegisterTx mocks base method.
func (m *MockStore) RegisterTx(arg0 context.Context, arg1 db.RegisterTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTx indicates an expected call of RegisterTx.
func (mr *MockStoreMockRecorder) RegisterTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTx", reflect.TypeOf((*MockStore)(nil).RegisterTx), arg0, arg1)
}

// SuspendStudentByEmail mocks base method.
func (m *MockStore) SuspendStudentByEmail(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendStudentByEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendStudentByEmail indicates an expected call of SuspendStudentByEmail.
func (mr *MockStoreMockRecorder) SuspendStudentByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendStudentByEmail", reflect.TypeOf((*MockStore)(nil).SuspendStudentByEmail), arg0, arg1)
}
